<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:properties-ext-widgets-reference="http://www.eclipse.org/sirius/properties/1.0.0/ext/widgets/reference" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" name="problemframe" version="12.0.0.2017041100">
  <ownedViewpoints name="ProblemFrameworkViewPoint">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="ProblemDiagram" domainClass="ProblemFrame::ProblemDiagram" enablePopupBars="true">
      <defaultLayer name="Default">
        <nodeMappings name="ExternalBiddableDomain" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::ExternalBiddableDomain">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/BiddableDomain.png">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="ExternalCausalDomain" preconditionExpression="aql:self.oclIsTypeOf(ProblemFrame::ExternalCausalDomain)" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::ExternalCausalDomain">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/CausalDomain.png">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="Requirement" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::Requirement">
          <borderedNodeMappings name="SMonReq" preconditionExpression="aql:self.eContainer().oclIsTypeOf(ProblemFrame::Requirement)" semanticCandidatesExpression="aql:self.eContents()" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.5/@ownedTools[name='openStateMachine']" domainClass="ProblemFrame::MyStateMachine">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/sm_representation.drawio.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/Requirement.png">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="StateMachine" preconditionExpression="aql:not self.eContainer().oclIsTypeOf(ProblemFrame::Requirement)" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.5/@ownedTools[name='openStateMachine']" domainClass="ProblemFrame::MyStateMachine">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/sm_representation.drawio.png">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="Interface" preconditionExpression="aql:target.differs(source)" sourceMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalBiddableDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Human'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalCausalDomain']" targetMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalBiddableDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Human'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalCausalDomain']" targetFinderExpression="feature:targetDomain" sourceFinderExpression="feature:sourceDomain" domainClass="ProblemFrame::Interface" useDomainElement="true">
          <style targetArrow="NoDecoration" sizeComputationExpression="2" routingStyle="manhattan">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <beginLabelStyleDescription showIcon="false" labelExpression="feature:beginControlSharedPhenomena">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </beginLabelStyleDescription>
            <endLabelStyleDescription showIcon="false" labelExpression="feature:endControlSharedPhenomena">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </endLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ReqConstraint" sourceMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='Requirement']" targetMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine']" targetFinderExpression="feature:constrains" sourceFinderExpression="feature:source" domainClass="ProblemFrame::ConstrainingRequirementReference" useDomainElement="true">
          <style lineStyle="dash" targetArrow="InputFillClosedArrow" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ReqReference" sourceMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='Requirement']" targetMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalBiddableDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Human']" targetFinderExpression="feature:reqReference" sourceFinderExpression="feature:source" domainClass="ProblemFrame::RequirementReference" useDomainElement="true">
          <style lineStyle="dash" targetArrow="NoDecoration" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="StateMachineReference" sourceMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalBiddableDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='Requirement'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Human'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalCausalDomain']" targetMapping="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='StateMachine']" targetFinderExpression="feature:statemachine">
          <style lineStyle="dash_dot" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="SystemRegion" semanticCandidatesExpression="feature:systemregion" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::SystemRegion">
          <subNodeMappings name="Machine" semanticCandidatesExpression="feature:systemDomain" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::Machine">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/Machine.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="InternalCausalDomain" preconditionExpression="aql:self.oclIsTypeOf(ProblemFrame::InternalCausalDomain)" semanticCandidatesExpression="feature:systemDomain" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::InternalCausalDomain">
            <style xsi:type="style:WorkspaceImageDescription" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/CausalDomain.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="LexicalDomain" preconditionExpression="aql:self.oclIsTypeOf(ProblemFrame::LexicalDomain)" semanticCandidatesExpression="feature:systemDomain" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::LexicalDomain">
            <style xsi:type="style:WorkspaceImageDescription" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/LexicalDomain.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="Human" semanticCandidatesExpression="feature:systemDomain" doubleClickDescription="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@toolSections.4/@ownedTools[name='createStateMachine']" domainClass="ProblemFrame::Human">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/my.problemframe.design/images/HUMAN.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="12" labelExpression="service:getSystemRegionLabel()">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
          </style>
        </containerMappings>
        <toolSections name="Internal Domains">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="createMachine" label="Machine" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine']" iconPath="/my.problemframe.design/images/16x16img/MachinaIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::Machine" referenceName="systemDomain">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Machine'+container.systemDomain->filter(ProblemFrame::Machine)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="createCausalDomain" label="InternalCausalDomain" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain']" iconPath="/my.problemframe.design/images/16x16img/CausalDomainIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::InternalCausalDomain" referenceName="systemDomain">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'CausalDomain'+container.systemDomain->filter(ProblemFrame::CausalDomain)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="createLexicalDomain" label="LexicalDomain" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain']" iconPath="/my.problemframe.design/images/16x16img/LexicalDomainIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::LexicalDomain" referenceName="systemDomain">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'LexicalDomain'+container.systemDomain->filter(ProblemFrame::LexicalDomain)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Human" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Human']" iconPath="/my.problemframe.design/images/16x16img/HumanIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::Human" referenceName="systemDomain"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="SystemRegion" containerMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::SystemRegion" referenceName="systemregion"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="External Domains">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="createBiddableDomain" label="ExternalBiddableDomain" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalBiddableDomain']" iconPath="/my.problemframe.design/images/16x16img/BiddableDomainIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::ExternalBiddableDomain" referenceName="domain">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'BiddableDomain'+container.domain->filter(ProblemFrame::ExternalBiddableDomain)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="createExternalCausalDomain" label="ExternalCausalDomain" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalCausalDomain']" iconPath="/my.problemframe.design/images/16x16img/CausalDomainIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::ExternalCausalDomain" referenceName="domain">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'CausalDomain'+container.domain->filter(ProblemFrame::ExternalCausalDomain)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Requirements">
          <ownedTools xsi:type="tool:ToolGroup" name="Requirements-temp"/>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="createRequirement" label="Requirement" nodeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='Requirement']" iconPath="/my.problemframe.design/images/16x16img/RequirementIcon.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::Requirement" referenceName="requirement">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Requirement'+container.requirement->filter(ProblemFrame::Requirement)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="createRequirementReference" label="ReqReference" edgeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@edgeMappings[name='ReqReference']" iconPath="/my.problemframe.design/images/16x16img/ReqRefIcon.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainer()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::RequirementReference" referenceName="reference">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="reqReference" valueExpression="var:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="createRequirementConstraint" label="ReqConstraint" edgeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@edgeMappings[name='ReqConstraint']" iconPath="/my.problemframe.design/images/16x16img/ReqConstIcon.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainer()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::ConstrainingRequirementReference" referenceName="reference">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="constrains" valueExpression="var:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Interface">
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="createInterface" label="Interface" edgeMappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@edgeMappings[name='Interface']" iconPath="/my.problemframe.design/images/16x16img/InterfaceIcon.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainer()">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.eContainer().oclIsTypeOf(ProblemFrame::SystemRegion)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainer().eContainer()">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::Interface" referenceName="interfaces">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="id" valueExpression="'new interface'"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceDomain" valueExpression="var:source"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="targetDomain" valueExpression="var:target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.eContainer().oclIsTypeOf(ProblemFrame::SystemRegion)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::Interface" referenceName="interfaces">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="id" valueExpression="'new interface'"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceDomain" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="targetDomain" valueExpression="var:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="DoubleClicks-createSM">
          <ownedTools xsi:type="tool:DoubleClickDescription" name="createStateMachine" mappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalBiddableDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='InternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='LexicalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Machine'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='Requirement'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']/@subNodeMappings[name='Human'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='ExternalCausalDomain'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@containerMappings[name='SystemRegion']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.statemachine->size()&lt;= 0"/>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ProblemFrame::MyStateMachine" referenceName="statemachine"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="DoubleClicks-gotoSM">
          <ownedTools xsi:type="tool:DoubleClickDescription" name="openStateMachine" mappings="//@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='StateMachine'] //@ownedViewpoints[name='ProblemFrameworkViewPoint']/@ownedRepresentations[name='ProblemDiagram']/@defaultLayer/@nodeMappings[name='Requirement']/@borderedNodeMappings[name='SMonReq']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Navigation" createIfNotExistent="true">
                <diagramDescription href="../../org.eclipse.gemoc.statemachine.design/description/statemachine.odesign#//@ownedViewpoints[name='SMViewpoint']/@ownedRepresentations[name='StateMachine%20Diagram']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:EditionTableDescription" name="Phenomena Table" initialisation="true" domainClass="ProblemFrame::ProblemDiagram">
      <ownedLineMappings name="Phenomenon" domainClass="ProblemFrame::Phenomenon"/>
      <ownedColumnMappings name="description" headerLabelExpression="Description" featureName="description" labelExpression="aql:self.description"/>
      <ownedColumnMappings name="phenomenon type" headerLabelExpression="Phenomenon Type" featureName="type" labelExpression="aql:self.type"/>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="my.problemframe.design.Services"/>
  </ownedViewpoints>
  <extensions xsi:type="properties:ViewExtensionDescription" name="Properties">
    <categories name="Default Category">
      <pages name="PropertiesPage-1" labelExpression="Properties" semanticCandidateExpression="var:self" preconditionExpression="aql:self.eContainer(ProblemFrame::MyStateMachine)=null" groups="//@extensions.0/@categories.0/@groups.0"/>
      <pages name="Interface Page" labelExpression="Shared Phenomena" domainClass="ProblemFrame::Interface" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.1"/>
      <pages name="Domain Page" labelExpression="Phenomena" domainClass="ProblemFrame::Domain" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.2"/>
      <groups name="General Group" labelExpression="Properties" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:DynamicMappingForDescription" name="sirius_default_rules_structural_features_for" iterator="eStructuralFeature" iterableExpression="aql:input.emfEditServices(self).getEStructuralFeatures()">
          <ifs name="sirius_default_rules_mono_string_if" predicateExpression="aql:input.emfEditServices(self).needsTextWidget(eStructuralFeature) and not input.emfEditServices(self).isMultiline(eStructuralFeature)">
            <widget xsi:type="properties:TextDescription" name="sirius_default_rules_mono_string" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)">
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_multi_string_if" predicateExpression="aql:input.emfEditServices(self).needsTextWidget(eStructuralFeature) and input.emfEditServices(self).isMultiline(eStructuralFeature)">
            <widget xsi:type="properties:TextAreaDescription" name="sirius_default_rules_multi_string" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)">
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_mono_boolean" predicateExpression="aql:input.emfEditServices(self).needsCheckboxWidget(eStructuralFeature)">
            <widget xsi:type="properties:CheckboxDescription" name="sirius_default_rules_mono_boolean" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)">
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_enum_if" predicateExpression="aql:eStructuralFeature.eType.oclIsKindOf(ecore::EEnum) and not(eStructuralFeature.many)">
            <widget xsi:type="properties:RadioDescription" name="sirius_default_rules_enum" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:eStructuralFeature.eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.eGet(eStructuralFeature.name).toString())" candidatesExpression="aql:eStructuralFeature.eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name" numberOfColumns="5">
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue.instance)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_eattribute_many_if" predicateExpression="aql:eStructuralFeature.oclIsKindOf(ecore::EAttribute) and eStructuralFeature.many">
            <widget xsi:type="properties:ListDescription" name="sirius_default_rules_eattribute_many" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)" displayExpression="var:value"/>
          </ifs>
        </controls>
      </groups>
      <groups name="SharedPhenomena Group" labelExpression="Shared Phenomena" domainClass="ProblemFrame::Interface" semanticCandidateExpression="var:self">
        <controls xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="SharedPhenomenaRef" referenceNameExpression="sharedPhenomena">
          <onClickOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
              <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="New Dialog">
                <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                  <initialOperation/>
                </buttons>
                <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                  <initialOperation/>
                </buttons>
                <page name="Default Page" labelExpression="Page" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.0/@pages.0"/>
              </subModelOperations>
            </firstModelOperations>
          </onClickOperation>
        </controls>
      </groups>
      <groups name="Phenomena Group" labelExpression="Group" domainClass="ProblemFrame::Domain" semanticCandidateExpression="var:self">
        <controls xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="PhenomenaRef" referenceNameExpression="phenomena">
          <onClickOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
              <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="New Dialog">
                <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                  <initialOperation/>
                </buttons>
                <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                  <initialOperation/>
                </buttons>
                <page name="Default Page" labelExpression="Page" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.0/@pages.0"/>
              </subModelOperations>
            </firstModelOperations>
          </onClickOperation>
        </controls>
      </groups>
    </categories>
  </extensions>
</description:Group>
