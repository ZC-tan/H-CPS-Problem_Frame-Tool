/**
 */
package ching.ProblemFrame.provider;

import ching.ProblemFrame.util.ProblemFrameAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProblemFrameItemProviderAdapterFactory extends ProblemFrameAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProblemFrameItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.ProblemDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProblemDiagramItemProvider problemDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.ProblemDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProblemDiagramAdapter() {
		if (problemDiagramItemProvider == null) {
			problemDiagramItemProvider = new ProblemDiagramItemProvider(this);
		}

		return problemDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.Machine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachineItemProvider machineItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.Machine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachineAdapter() {
		if (machineItemProvider == null) {
			machineItemProvider = new MachineItemProvider(this);
		}

		return machineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.LexicalDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LexicalDomainItemProvider lexicalDomainItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.LexicalDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLexicalDomainAdapter() {
		if (lexicalDomainItemProvider == null) {
			lexicalDomainItemProvider = new LexicalDomainItemProvider(this);
		}

		return lexicalDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.BiddableDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BiddableDomainItemProvider biddableDomainItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.BiddableDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBiddableDomainAdapter() {
		if (biddableDomainItemProvider == null) {
			biddableDomainItemProvider = new BiddableDomainItemProvider(this);
		}

		return biddableDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.CausalDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalDomainItemProvider causalDomainItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.CausalDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalDomainAdapter() {
		if (causalDomainItemProvider == null) {
			causalDomainItemProvider = new CausalDomainItemProvider(this);
		}

		return causalDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.Phenomenon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhenomenonItemProvider phenomenonItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.Phenomenon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhenomenonAdapter() {
		if (phenomenonItemProvider == null) {
			phenomenonItemProvider = new PhenomenonItemProvider(this);
		}

		return phenomenonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.RequirementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementReferenceItemProvider requirementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.RequirementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementReferenceAdapter() {
		if (requirementReferenceItemProvider == null) {
			requirementReferenceItemProvider = new RequirementReferenceItemProvider(this);
		}

		return requirementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.ConstrainingRequirementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstrainingRequirementReferenceItemProvider constrainingRequirementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.ConstrainingRequirementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstrainingRequirementReferenceAdapter() {
		if (constrainingRequirementReferenceItemProvider == null) {
			constrainingRequirementReferenceItemProvider = new ConstrainingRequirementReferenceItemProvider(this);
		}

		return constrainingRequirementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ching.ProblemFrame.MyStateMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MyStateMachineItemProvider myStateMachineItemProvider;

	/**
	 * This creates an adapter for a {@link ching.ProblemFrame.MyStateMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMyStateMachineAdapter() {
		if (myStateMachineItemProvider == null) {
			myStateMachineItemProvider = new MyStateMachineItemProvider(this);
		}

		return myStateMachineItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (problemDiagramItemProvider != null)
			problemDiagramItemProvider.dispose();
		if (machineItemProvider != null)
			machineItemProvider.dispose();
		if (lexicalDomainItemProvider != null)
			lexicalDomainItemProvider.dispose();
		if (biddableDomainItemProvider != null)
			biddableDomainItemProvider.dispose();
		if (causalDomainItemProvider != null)
			causalDomainItemProvider.dispose();
		if (interfaceItemProvider != null)
			interfaceItemProvider.dispose();
		if (phenomenonItemProvider != null)
			phenomenonItemProvider.dispose();
		if (requirementReferenceItemProvider != null)
			requirementReferenceItemProvider.dispose();
		if (constrainingRequirementReferenceItemProvider != null)
			constrainingRequirementReferenceItemProvider.dispose();
		if (requirementItemProvider != null)
			requirementItemProvider.dispose();
		if (myStateMachineItemProvider != null)
			myStateMachineItemProvider.dispose();
	}

}
